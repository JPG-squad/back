######## ------------------- POETRY & DEPENDENCIES  ------------------- ########
[tool.poetry]
name = "jpg-back"
version = "0.1.0"
description = "JPG -- backend"
authors = ["Pau Vilella <pau.vilella.st@gmail.com>", "Joan Plaja <joanplaja10@gmail.com>", "Gerard Lozano <geriloza@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = ">=3.9, <3.11"
django = "^4.1.3"
djangorestframework = "^3.14.0"
psycopg2-binary = "^2.9.5"
drf-spectacular = "^0.25.1"
boto3 = "^1.26.75"
django-cors-headers = "^3.14.0"
openai = "^0.27.5"
pydub = "^0.25.1"
colorlog = "^6.7.0"
python-json-logger = "^2.0.7"
channels = "^4.0.0"
daphne = "^4.0.0"
deepgram-sdk = "^2.4.0"

[tool.poetry.group.dev.dependencies]
pytest-mock = "^3.10.0"
httpx = "^0.23.3"
pytest = "^7.2.2"
black = "^23.1.0"
moto = "^4.1.5"
pytest-cov = "^4.0.0"
debugpy = "^1.6.6"
ruff = "^0.0.263"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.setuptools]
include-package-data = true

[tool.setuptools.packages]
find = {}  # Scanning implicit namespaces is active by default

######## ------------------- TEST CONFIGURATIONS ------------------- ########

[tool.pytest.ini_options]
testpaths = "tests"
python_files = ["tests.py","test_*.py"]
pythonpath = "src"

# env = No environment at the moment

# addopts: Add the specified OPTS to the set of command line arguments
addopts = """--durations=5  \
    -p no:warnings \
    --cov=. \
    --no-cov-on-fail \
    --cov-report term-missing \
    --cov-report term:skip-covered \
    --cov-report xml \
    --cov-report html \
    --cov-branch \
    --cov-fail-under=70"""
#--durations=5  Show N slowest setup/test durations
#-p no:warnings   Disable catching warnings during test execution ( documentation: https://docs.pytest.org/en/stable/how-to/capture-warnings.html)
#--cov=.   Destination of the coverage files
#--no-cov-on-fail   Do not report coverage if test run fails.
#--cov-report term-missing   Adds failed tests numbers if cover is not 100%
#--cov-report term:skip-covered Does not adds 100% covered tests on the report ( Visual examples about --cov-report at https://pytest-cov.readthedocs.io/en/latest/reporting.html)
#--cov-report xml   Outputs de cover report in html and xml
#--cov-report html
#--cov-branch   Enable branch coverage ( interesting documentation: https://coverage.readthedocs.io/en/6.5.0/branch.html )
#--cov-fail-under=70  Fail if coverage percentage is under 70%

# Markers: You can “mark” a test function with custom metadata, then you can restrict a test run to only run tests marked with a specific marker (https://docs.pytest.org/en/7.1.x/example/markers.html)
# Example:
# markers =
    # unit_test: Pure unit tests.
    # integration_test: Tests that access a database, API, etc.
# Then test specific parts or exclude them:
# pytest -v -m unit_test
# pytest -v -m "not integration_test"


######## ------------------- LINTER CONFIGURATIONS ------------------- ########

[tool.ruff] # Documentation: https://beta.ruff.rs/docs
line-length = 120 # Same as Black.
ignore-init-module-imports = true
# Rules documentation: https://beta.ruff.rs/docs/rules/
select = [
    "E",    # pycodestyle errors
    "W",    # pycodestyle warnings
    "F",    # pyflakes
    "YTT",  # flake8-2020
    "C",    # flake8-comprehensions
    "B",    # flake8-bugbear,
    "N",    # pep8-naming
    "I" ]   # isort

ignore = [
    "B008", # do not perform function calls in argument defaults
    "C901", # too complex
    "B904", # `except` clause, raise exceptions with `raise,
    "B027", # is an empty method in an abstract base class
    "B024", # abstract base class, but it has no abstract methods
    "B026", # Star-arg unpacking after a keyword argument is strongly discouraged
    "B905", # `zip()` without an explicit `strict=` parameter
    "F403", # from .conversation import *` used; unable to detect undefined names
    "F401", #`.answer.AnswerModel` imported but unused; consider adding to `__all__` or using a redundant alias
    "N818"]  # Error suffix on exception class names

target-version = "py39"

# We do not especify exclude directories and files as default configuration matches our use case.

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

# ISORT CONFIGURATION USED BY RUFF
[tool.ruff.isort] # https://beta.ruff.rs/docs/settings/#isort
force-sort-within-sections = true

# The sections and order of the imports
section-order = ["future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder"]

# Our libraries used on the project, must be added here, then they will be groupped together
known-first-party = []

# Our local folders used on the project, must be added here, then they will be groupped together
known-local-folder = ["app", "conversation", "core", "user"]

# Third party libraries used on the project, must be added here, then they will be groupped together
known-third-party = ["fastapi","boto3","pandas","psycopg2-binary"]

lines-after-imports = 2
lines-between-types = 0

[tool.black]
line-length = 120
skip-string-normalization = true
target-version = ['py39']
include = '\.pyi?$'
exclude = '''/(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | _build
    | buck-out
    | build
    | dist
    | migrations
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)/
'''

[tool.pylint]
max-line-length = 120
disable = ["C0112","C0114","C0115","C0116"]
